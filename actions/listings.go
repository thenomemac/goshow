package actions

import (
	"fmt"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
	"github.com/thenomemac/goshow/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Listing)
// DB Table: Plural (listings)
// Resource: Plural (Listings)
// Path: Plural (/listings)
// View Template Folder: Plural (/templates/listings/)

// ListingsResource is the resource for the Listing model
type ListingsResource struct {
	buffalo.Resource
}

// List gets all Listings. This function is mapped to the path
// GET /listings
func (v ListingsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	listings := &models.Listings{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params()).Eager()

	// Retrieve all Listings from the DB
	if err := q.All(listings); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, listings))
}

// Show gets the data for one Listing. This function is mapped to
// the path GET /listings/{listing_id}
func (v ListingsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Listing
	listing := &models.Listing{}

	// To find the Listing the parameter listing_id is used.
	if err := tx.Eager().Find(listing, c.Param("listing_id")); err != nil {
		return c.Error(404, err)
	}

	fmt.Println("Listing:", listing)

	return c.Render(200, r.Auto(c, listing))
}

// New renders the form for creating a new Listing.
// This function is mapped to the path GET /listings/new
func (v ListingsResource) New(c buffalo.Context) error {
	c.Set("fa", &models.Address{})
	return c.Render(200, r.Auto(c, &models.Listing{}))
}

// Create adds a Listing to the DB. This function is mapped to the
// path POST /listings
func (v ListingsResource) Create(c buffalo.Context) error {
	// Allocate an empty Listing
	listing := &models.Listing{}

	// Bind listing to the html form elements
	if err := c.Bind(listing); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(listing)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, listing))
	}

	fmt.Println("Listing:", listing)
	// key the address to the listing
	address := &listing.Address
	address.ListingID = listing.ID

	verrs, err = tx.ValidateAndCreate(address)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, listing))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Listing was created successfully")

	// and redirect to the listings index page
	return c.Render(201, r.Auto(c, listing))
}

// Edit renders a edit form for a Listing. This function is
// mapped to the path GET /listings/{listing_id}/edit
func (v ListingsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Listing
	listing := &models.Listing{}

	if err := tx.Find(listing, c.Param("listing_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, listing))
}

// Update changes a Listing in the DB. This function is mapped to
// the path PUT /listings/{listing_id}
func (v ListingsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Listing
	listing := &models.Listing{}

	if err := tx.Find(listing, c.Param("listing_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Listing to the html form elements
	if err := c.Bind(listing); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(listing)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, listing))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Listing was updated successfully")

	// and redirect to the listings index page
	return c.Render(200, r.Auto(c, listing))
}

// Destroy deletes a Listing from the DB. This function is mapped
// to the path DELETE /listings/{listing_id}
func (v ListingsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Listing
	listing := &models.Listing{}

	// To find the Listing the parameter listing_id is used.
	if err := tx.Find(listing, c.Param("listing_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(listing); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Listing was destroyed successfully")

	// Redirect to the listings index page
	return c.Render(200, r.Auto(c, listing))
}
